{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,IAAI,EAAW,EACX,EAAa,EAEb,EAA4B,SAAS,eAAe,UACpD,EAAiC,SAAS,eAAe,SACzD,EAAkC,SAAS,eAAe,UAC9D,EAAO,MAAQ,EAAW,EAAa,EACvC,EAAO,OAAS,EAAW,EAAa,EACxC,EAAY,MAAQ,EAAW,EAAa,EAC5C,EAAY,OAAS,EAAW,EAAa,EAC7C,EAAa,MAAQ,EAAW,EAAa,EAC7C,EAAa,OAAS,EAAW,EAAa,EAE9C,IAAI,EAAM,EAAO,WAAW,MACxB,EAAW,EAAY,WAAW,MAClC,EAAY,EAAa,WAAW,MAEpC,GAAS,EAEb,SAAS,IAEA,OADI,IAAI,MAAM,GAAU,KAAK,GACxB,IAAI,SAAC,EAAG,GAAM,OAAA,IAAI,MAAM,GAAU,KAAK,KAErD,SAAS,IAEA,OADI,IAAI,MAAM,GAAG,KAAK,GACjB,IAAI,SAAC,EAAG,GAEX,OADG,IAAI,MAAM,GAAG,KAAK,GACjB,IAAI,SAAC,EAAG,GAAM,OAAA,QAI7B,IAAI,EAAM,IAGV,SAAS,EAAU,EAAM,GACnB,IAAA,EAAM,EACN,EAAM,EAOH,OANiB,GAApB,UAAU,SACZ,EAAM,EACN,EAAM,GAER,EAAM,KAAK,KAAK,GAChB,EAAM,KAAK,MAAM,GACV,KAAK,MAAM,KAAK,UAAY,EAAM,IAAQ,EAGnD,SAAS,IACA,MAAA,CAAC,EAAU,GAAI,EAAU,GAAI,EAAU,GAAW,EAAU,IAErE,SAAS,EAAO,EAAK,QAAA,IAAA,IAAA,EAAA,GACf,IAAA,EAAU,EAAI,MAAM,GAAI,GACxB,EAAU,EAAI,EAAI,OAAS,GAE/B,EAAQ,OAAO,SAAC,EAAK,GAAM,OAAA,EAAI,IAAI,GAAK,GAAW,EAErD,SAAS,EAAO,GACP,OAAA,EAAI,OAAO,SAAC,EAAK,GAAM,OAAA,EAAI,IAAI,GAgBxC,SAAS,EAAU,GACjB,EAAU,OACL,IAAA,IAAI,EAAK,EAAG,EAAK,EAAG,IAClB,IAAA,IAAI,EAAK,EAAG,EAAK,EAAG,IAClB,IAAA,IAAI,EAAK,EAAG,EAAK,EAAU,IACzB,IAAA,IAAI,EAAK,EAAG,EAAK,EAAU,IAAM,CAChC,IAAA,EAAI,EAAO,CAAC,EAAI,EAAI,EAAI,IAC5B,EAAI,UAAiB,GAAL,EAAS,OAAS,QAClC,EAAU,UAAiB,GAAL,EAAS,OAAS,QACpC,IAAA,GAAS,EAAK,EAAW,GAAM,EAC/B,GAAS,EAAK,EAAW,GAAM,EACnC,EAAI,UAAU,EAAO,EAAO,EAAY,GACxC,EAAU,UAAU,EAAO,EAAO,EAAY,GAC9C,EAAI,SAAS,EAAO,EAAO,EAAY,GACvC,EAAU,SAAS,EAAO,EAAO,EAAY,IA5BvD,EAAO,CAAC,EAAG,EAAG,EAAG,IACjB,EAAO,CAAC,EAAG,EAAG,EAAG,IACjB,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KACP,EAAO,KAsBP,IAAK,IAAI,EAAQ,EAAG,EAAQ,EAAG,IAAS,CACtC,EAAS,YAAc,OACvB,EAAS,UAAY,GACjB,IAAA,EAAK,EAAQ,EAAO,MAAS,EACjC,EAAS,YACT,EAAS,OAAO,EAAG,GACnB,EAAS,OAAO,EAAG,EAAO,QAC1B,EAAS,SACT,EAAS,YACT,EAAS,OAAO,EAAG,GACnB,EAAS,OAAO,EAAO,OAAQ,GAC/B,EAAS,SAGX,IAAS,EAAQ,EAAG,EAAQ,EAAI,EAAU,IAAS,CACjD,EAAS,YAAc,OACnB,EAAK,EAAQ,EAAO,OAAU,EAAI,GACtC,EAAS,YACT,EAAS,OAAO,EAAG,GACnB,EAAS,OAAO,EAAG,EAAO,QAC1B,EAAS,SACT,EAAS,YACT,EAAS,OAAO,EAAG,GACnB,EAAS,OAAO,EAAO,OAAQ,GAC/B,EAAS,SAIX,SAAS,IACH,IAAA,EAAU,EAAa,YACvB,EAAsB,SAAS,eAAe,UAElD,EAAO,MAAM,YAAc,QAAQ,EAAO,KAC1C,EAAO,MAAM,iBAAsB,EAAW,EAAU,IACxD,EAAO,MAAM,iBAAsB,EAAW,EAAU,KACxD,EAAO,MAAM,kBAAoB,SACjC,EAAO,MAAM,YAAiB,EAAW,EAAU,KACnD,EAAO,MAAM,YAAc,QAX7B,EAAU,GACV,IAYA,IAAI,EAAO,SAAC,EAAG,GACT,QADS,IAAA,IAAA,GAAA,GACR,EAAD,CAGA,IAAA,EAAA,EAAA,wBAAE,EAAA,EAAA,KAAM,EAAA,EAAA,IAAK,EAAA,EAAA,MAAO,EAAA,EAAA,OACpB,EAAI,EAAE,QAAU,EAChB,EAAI,EAAE,QAAU,EAChB,EAAW,EAAI,EAAS,EAAO,MAC/B,EAAW,EAAI,EAAU,EAAO,OAChC,EAAQ,KAAK,MAAM,EAAU,GAC7B,EAAQ,KAAK,MAAM,EAAU,GAM7B,EAAM,CAJD,KAAK,MAAM,EAAQ,GACnB,KAAK,MAAM,EAAQ,GACnB,EAAQ,EACR,EAAQ,GAEb,EAAI,EAAO,IAAQ,EAClB,IACH,EAAI,GAEN,EAAO,EAAK,EAAI,GAGhB,EAAU,GACV,MAGF,EAAO,iBAAiB,YAAa,SAAA,GACnC,GAAS,EACT,EAAK,GAAG,KAEV,EAAO,iBAAiB,YAAa,GACrC,EAAO,iBAAiB,UAAW,WACjC,GAAS,IAEX,EAAO,iBAAiB,aAAc,WACpC,GAAS,IAGX,EAAO,iBAAiB,aAAc,SAAA,GACpC,GAAS,EAET,EAAE,iBAGG,IADC,IAAA,EAAU,EAAE,cACT,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAClC,EAAC,QAAc,EAAQ,GAAG,QAC1B,EAAC,QAAc,EAAQ,GAAG,QAC1B,EAAK,KAGT,EAAO,iBAAiB,YAAa,SAAA,GACnC,EAAE,iBACF,GAAS,EAGJ,IADC,IAAA,EAAU,EAAE,cACT,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAClC,EAAC,QAAc,EAAQ,GAAG,QAC1B,EAAC,QAAc,EAAQ,GAAG,QAC1B,EAAK","file":"border.929d6cb9.js","sourceRoot":"..","sourcesContent":["var tileSize = 4;\nvar pixelRatio = 4;\n\nlet canvas = <HTMLCanvasElement>document.getElementById(\"editor\");\nlet guideCanvas = <HTMLCanvasElement>document.getElementById(\"guide\");\nlet renderCanvas = <HTMLCanvasElement>document.getElementById(\"render\");\ncanvas.width = tileSize * pixelRatio * 3;\ncanvas.height = tileSize * pixelRatio * 3;\nguideCanvas.width = tileSize * pixelRatio * 3;\nguideCanvas.height = tileSize * pixelRatio * 3;\nrenderCanvas.width = tileSize * pixelRatio * 3;\nrenderCanvas.height = tileSize * pixelRatio * 3;\n\nvar ctx = canvas.getContext(\"2d\");\nvar guideCtx = guideCanvas.getContext(\"2d\");\nvar renderCtx = renderCanvas.getContext(\"2d\");\n\nvar isDown = false;\n\nfunction newCell() {\n  let rows = new Array(tileSize).fill(0);\n  return rows.map((v, i) => new Array(tileSize).fill(0));\n}\nfunction newGrid() {\n  let rows = new Array(3).fill(0);\n  return rows.map((v, i) => {\n    let col = new Array(3).fill(0);\n    return col.map((v, i) => newCell());\n  });\n}\n\nlet map = newGrid();\n// console.log(map);\n\nfunction randomInt(amin, amax?: number) {\n  var min = amin;\n  var max = amax;\n  if (arguments.length == 1) {\n    min = 0;\n    max = amin;\n  }\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction randomLoc() {\n  return [randomInt(3), randomInt(3), randomInt(tileSize), randomInt(tileSize)];\n}\nfunction setLoc(loc, v = 1) {\n  let address = loc.slice(0, -1);\n  let lastPos = loc[loc.length - 1];\n  //   console.log(v);\n  address.reduce((acc, i) => acc[i], map)[lastPos] = v;\n}\nfunction getLoc(loc) {\n  return loc.reduce((acc, i) => acc[i], map);\n}\nsetLoc([0, 0, 0, 0]);\nsetLoc([2, 2, 0, 0]);\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\nsetLoc(randomLoc());\n\nfunction renderMap(map) {\n  renderCtx.fill();\n  for (let sx = 0; sx < 3; sx++) {\n    for (let sy = 0; sy < 3; sy++) {\n      for (let cx = 0; cx < tileSize; cx++) {\n        for (let cy = 0; cy < tileSize; cy++) {\n          let v = getLoc([sx, sy, cx, cy]);\n          ctx.fillStyle = v == 1 ? \"#000\" : \"#fff0\";\n          renderCtx.fillStyle = v == 1 ? \"#000\" : \"#fff0\";\n          let gridX = (sx * tileSize + cx) * pixelRatio;\n          let gridY = (sy * tileSize + cy) * pixelRatio;\n          ctx.clearRect(gridX, gridY, pixelRatio, pixelRatio);\n          renderCtx.clearRect(gridX, gridY, pixelRatio, pixelRatio);\n          ctx.fillRect(gridX, gridY, pixelRatio, pixelRatio);\n          renderCtx.fillRect(gridX, gridY, pixelRatio, pixelRatio);\n        }\n      }\n    }\n  }\n}\nfor (let index = 0; index < 3; index++) {\n  guideCtx.strokeStyle = \"#999\";\n  guideCtx.lineWidth = 0.5;\n  let x = (index * canvas.width) / 3;\n  guideCtx.beginPath();\n  guideCtx.moveTo(x, 0);\n  guideCtx.lineTo(x, canvas.height);\n  guideCtx.stroke();\n  guideCtx.beginPath();\n  guideCtx.moveTo(0, x);\n  guideCtx.lineTo(canvas.height, x);\n  guideCtx.stroke();\n}\n\nfor (let index = 0; index < 3 * tileSize; index++) {\n  guideCtx.strokeStyle = \"#ccc\";\n  let x = (index * canvas.width) / (3 * tileSize);\n  guideCtx.beginPath();\n  guideCtx.moveTo(x, 0);\n  guideCtx.lineTo(x, canvas.height);\n  guideCtx.stroke();\n  guideCtx.beginPath();\n  guideCtx.moveTo(0, x);\n  guideCtx.lineTo(canvas.height, x);\n  guideCtx.stroke();\n}\nrenderMap(map);\nsetBorder();\nfunction setBorder() {\n  let dataURI = renderCanvas.toDataURL();\n  let target = <HTMLElement>document.getElementById(\"target\");\n\n  target.style.borderImage = `url(\"${dataURI}\")`;\n  target.style.borderImageSlice = `${tileSize * pixelRatio} `;\n  target.style.borderImageWidth = `${tileSize * pixelRatio}px`;\n  target.style.borderImageRepeat = \"repeat\";\n  target.style.borderWidth = `${tileSize * pixelRatio}px`;\n  target.style.borderStyle = \"solid\";\n}\nlet draw = (e, isClick = false) => {\n  if (!isDown) {\n    return;\n  }\n  let { left, top, width, height } = canvas.getBoundingClientRect();\n  let x = e.clientX - left;\n  let y = e.clientY - top;\n  let canvasX = (x / width) * canvas.width;\n  let canvasY = (y / height) * canvas.height;\n  let gridX = Math.floor(canvasX / pixelRatio);\n  let gridY = Math.floor(canvasY / pixelRatio);\n\n  let sx = Math.floor(gridX / tileSize);\n  let sy = Math.floor(gridY / tileSize);\n  let cx = gridX % tileSize;\n  let cy = gridY % tileSize;\n  let loc = [sx, sy, cx, cy];\n  let v = getLoc(loc) || 0;\n  if (!isClick) {\n    v = 0;\n  }\n  setLoc(loc, 1 - v);\n  //   ctx.fillStyle = \"#000\";\n  //   ctx.fillRect(gridX, gridY, pixelRatio, pixelRatio);\n  renderMap(map);\n  setBorder();\n};\n\ncanvas.addEventListener(\"mousedown\", e => {\n  isDown = true;\n  draw(e, true);\n});\ncanvas.addEventListener(\"mousemove\", draw);\ncanvas.addEventListener(\"mouseup\", () => {\n  isDown = false;\n});\ncanvas.addEventListener(\"mouseleave\", () => {\n  isDown = false;\n});\n\ncanvas.addEventListener(\"touchstart\", e => {\n  isDown = true;\n\n  e.preventDefault();\n\n  const touches = e.targetTouches;\n  for (let i = 0; i < touches.length; i++) {\n    e[\"clientX\"] = touches[i].clientX;\n    e[\"clientY\"] = touches[i].clientY;\n    draw(e);\n  }\n});\ncanvas.addEventListener(\"touchmove\", e => {\n  e.preventDefault();\n  isDown = true;\n\n  const touches = e.targetTouches;\n  for (let i = 0; i < touches.length; i++) {\n    e[\"clientX\"] = touches[i].clientX;\n    e[\"clientY\"] = touches[i].clientY;\n    draw(e);\n  }\n});\n"]}